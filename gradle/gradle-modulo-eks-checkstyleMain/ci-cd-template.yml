steps:
#-----------   CI ------------------ 
# # Preparar el an치lisis en SonarCloud
# - task: SonarCloudPrepare@1
#   displayName: 'Prepare analysis on SonarCloud'
#   inputs:
#     SonarCloud: $(SonarCloud)
#     organization: $(OrganizationSonar)
#     scannerMode: 'CLI'
#     configMode: 'file'
#     configFile: 'sonar-project.properties'

#Tarea de gradlew version de java 1.8 - clean - build
- task: Gradle@3
  displayName: 'Build'
  inputs:
    gradleWrapperFile: 'gradlew'
    workingDirectory: ''
    tasks: 'clean build'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: $(javaVersion)
    jdkArchitectureOption: 'x64'
    options: '-x test -x checkstyleMain -x checkstyleTest --info --stacktrace --warning-mode all'  #-x test     
    sonarQubeRunAnalysis: false  #cambiar a true cuando inicien las pruebas
    spotBugsAnalysis: false

# # Ejecutar el an치lisis en SonarCloud
# - task: SonarCloudAnalyze@1
#   displayName: 'Run SonarCloud Analysis'

#Tarea para copiar los artefactos necesarios
- task: CopyFiles@2
  displayName: 'Copy JAR to Artifact Directory'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/build/libs'
    Contents: '**/*.jar'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    CleanTargetFolder: true

#Tarea para publicar el artefacto
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: JAR'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'JAR'
    publishLocation: 'Container'


##-----------   CD ------------------   
# Iniciar sesi칩n en Amazon ECR
- task: AWSCLI@1
  displayName: 'ECR Login'
  inputs:
    awsCredentials: 'service-connection-general'
    regionName: $(awsRegion)
    awsCommand: 'ecr'
    awsSubCommand: 'get-login-password'
    awsArguments: '--region $(awsRegion)'

# Construir la imagen Docker
- task: Docker@2
  displayName: 'Build Docker Image'
  inputs:
    repository: '$(ecrRegistry)/$(imageName)'
    command: 'build'
    Dockerfile: '$(dockerFileName)'
    buildContext: '.'
    tags: '$(imageTag)'

# Listar las im치genes de Docker (opcional)
- script: |
    docker images
  displayName: 'List Docker Images'

# Publicar la imagen a ECR
- task: ECRPushImage@1
  displayName: 'ECR Push Image'
  inputs:
    awsCredentials: 'service-connection-general'
    regionName: 'us-east-1'
    imageSource: 'imagename'
    sourceImageName: '$(ecrRegistry)/$(imageName)'
    sourceImageTag: '$(imageTag)'
    repositoryName: '$(imageName)'
    pushTag: '$(imageTag)'
    
# Configurar el contexto de kubectl para EKS
- task: AWSCLI@1
  displayName: 'Configure kubectl for EKS'
  inputs:
    awsCredentials: 'service-connection-general'
    regionName: 'us-east-1'
    awsCommand: 'eks'
    awsSubCommand: 'update-kubeconfig'
    awsArguments: '--name $(eksClusterName) --region $(awsRegion)'

- task: AWSShellScript@1
  displayName: 'Restart Deployment in Kubernetes'
  inputs:
    awsCredentials: 'service-connection-general'
    regionName: 'us-east-1'
    scriptType: 'inline'
    inlineScript: |
      set -e
      # Verificar el contexto actual de kubectl
        echo "Obteniendo el contexto actual de kubectl..."
        kubectl config current-context
      
      # Restart deployment in Kubernetes
        echo "Restarting deployment in Kubernetes..."
        kubectl rollout restart deployment $(deploymentName) -n $(namespace)
        echo "Fin de la tarea AWSShellScript"
